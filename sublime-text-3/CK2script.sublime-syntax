%YAML 1.2
---
name: CK2script
file_extensions:
  - gfx
  - gui
scope: source.ck2script
first_line_match: -\*- ck2(\.\w[\w\.]*)? -\*-

contexts:
  main:
    - match: '#.*'
      scope: comment.line.number-sign.ck2script
    - match: '"'
      scope: punctuation.definition.string.begin.ck2script
      push:
        - meta_scope: string.quoted.double.ck2script
        - match: '"'
          scope: punctuation.definition.string.end.ck2script
          pop: true
        - match: \n
          scope: invalid.illegal.newline.ck2script
        - match: \\.
          scope: invalid.illegal.escape.ck2script
        # TODO: want to recognize localisation control sequences (e.g., '§Y') as markup of some kind, which could theoretically be colored as it is in-game
        #       --> also would like to match begin/end markup control sequences together
        #       --> also would like to match localisation command brackets together
        #           --> within these, would like to recognize the builtin localisation scopes (e.g., PrevPrev or Root or ...)
    - match: \{
      push: braces
    - match: \}
      scope: invalid.illegal.stray-bracket-end
    - match: \b(id)\s*=\s*(((\w+)\.)?(0|([1-9][0-9]*)))\b
      captures:
        1: keyword.control.ck2script
        2: entity.function.name
        # 4: some scope for namespaces or identifiers (entity.name... ?)
        5: constant.numeric
    - match: (?<!\w)(\-?([0-9]+\.)?[0-9]+)\b
      scope: constant.numeric.ck2script
    - match: \b[bcdek]_[a-z][a-z_-]+\b
      scope: variable.other.ck2script
    - match: \bc_\d+\b # character scope, not a title; integer is character ID
      scope: variable.other.ck2script
    - match: \b(clear(_global)?_event_target|save(_global)?_event_target_as)\s*=\s*([a-zA-Z]\w*)\b
      captures:
        4: variable.other.ck2script
    - match: \b(event_target:[a-zA-Z]\w*)\b
      scope: variable.other.ck2script
    - match: \b(flag)\s*=\s*(\w+)\b # e.g., had_title_flag = { flag = gumdrops days = 7 } -- highlight 'gumdrops' like a var
      captures:
#       1: keyword.control.ck2script
        2: variable.other.ck2script
    - match: \b((set|clr|has)_(character|province|title|artifact|global)_flag)\s*=\s*(\w+)\b
      captures:
        1: keyword.control.ck2script
        4: variable.other.ck2script
    - match: \bhad_(character|province|title|artifact|global)_flag\b
      scope: keyword.control.ck2script
    - match: \b(ROOT|root|(FROM){1,4}|(from){1,4}|(PREV){1,4}|(prev){1,4}|(ROOT_(FROM){1,4})|(root_(from){1,4})|(ROOT_(from){1,4})|(root_(FROM){1,4})|THIS|this)\b
      scope: variable.language.ck2script
    - match: \b((mult_)?modifier|modifier|additive_modifier|additive_power_diff_modifier|additive_opinion_modifier)\b
      scope: keyword.control.ck2script
      # these guys are really annoying without being context-limited (and having a color scheme that gives me more than 3-4 choices):
#    - match: \b(factor|value|count|amount|days|months|years)\b
#      scope: keyword.control.ck2script
    - match: \b(hidden_tooltip|custom_tooltip|hidden_trigger|hidden_effect)\b
      scope: keyword.control.ck2script
    - match: \b(AND|OR|NOT|NOR|NAND|and|or|not|nor|nand|calc_true_if)\b
      scope: support.constant.ck2script
    - match: \b(yes|no)\b
      scope: support.constant.ck2script
    - match: \b(if|trigger_switch|limit|on_trigger|while)\b
      scope: keyword.control.ck2script
      # types of "events" (repeat_event is strictly a command and not also an actual event type)
    - match: \b((character|long_character|narrative|letter|diploresponse|province|unit|repeat|society_quest)_event)\b
      scope: keyword.control.ck2script
      # top-level event context flags/paramters:
    - match: \b(((show_(ROOT|root))|(hide_(window|from|FROM|new))|(show(_from|_FROM){2,4})))\b
      scope: keyword.control.ck2script
    - match: \b(is_triggered_only|major|desc|is_friendly|picture|border|title|notification)\b
      scope: keyword.control.ck2script
      # event pre-triggers
    - match: \b(only_(independent|playable|rulers|capable|men|women)|capable_only|is_patrician|ai|war|is_married|has_character_flag|has_global_flag|has_flag)\b
      scope: keyword.control.ck2script
    - match: \b(friends|rivals|has_dlc|lacks_dlc|is_part_of_plot|is_in_society|prisoner|min_age|max_age|religion|religion_group|culture|culture_group)\b
      scope: keyword.control.ck2script
      # top-level event effect blocks
    - match: \b(immediate|option|after)\b
      scope: keyword.control.ck2script
      # general common triggers & effects
    - match: \b(is_republic|is_merchant_republic|is_tribal|is_nomadic|is_feudal|is_theocracy|mercenary|holy_order|rebel|temporary|clan|adventurer|is_primary_type_title|is_landless_type_title|controls_religion)\b
      scope: keyword.control.ck2script
    - match: \b((is_primary_holder_title(_tier)?)|tier|real_tier|lower_tier_than|lower_real_tier_than|higher_tier_than|higher_real_tier_than|is_titular|is_de_jure_title|de_facto_liege|de_facto_liege_title)\b
      scope: keyword.control.ck2script
    - match: \b(character|title|province|province_id|dynasty|region|de_jure_liege|de_jure_liege_or_above|de_jure_vassal_or_below|has_landed_title|holder|always|is_liege_or_above|is_vassal_or_below|is_liege_of|vassal_of|same_realm|same_liege)\b
      scope: keyword.control.ck2script
    - match: \b(has_(strong_|weak_)?claim|claimed_by|has_holder|has_owner|((reverse_)?(remove_)?opinion)|((reverse_)?has_opinion_modifier)|independent|is_landed|has_regent|is_adult|is_playable|is_ruler|is_female|is_incapable)\b
      scope: keyword.control.ck2script
    - match: \b(is_land|conquest_culture|((reverse_)?realm_levy_diff)|trait|(is_primary_war_(defender|attacker))|war_with|is_tributary|pays_tribute_to|create_title|create_character|has_law|is_allied_with|sibling)\b
      scope: keyword.control.ck2script
    - match: \b(using_cb|check_variable|is_variable_equal|is_dying|is_alive|wealth|prestige|piety|diplomacy|martial|stewardship|intrigue|learning|attribute_diff|age_diff|health|base_health|can_marry|has_inheritance_blocker)\b
      scope: keyword.control.ck2script
    - match: \b(realm_size|ruled_years|in_revolt|can_hold_title|holding_type|government|(num_of_(realm_counties|settlements|buildings|baron_titles|count_titles|count_titles_in_realm|duke_titles|king_titles|emperor_titles|children|claims|consorts|dynasty_members|faction_backers|lovers|max_settlements|friends|plot_backers|prisoners|rivals|titles|trade_posts|trade_post_diff|traits|unique_dynasty_vassals|vassals)))\b
      scope: keyword.control.ck2script
    - match: \b(((owner_)?under_(FROM|FROMFROM|ROOT|PREV|PREVPREV))|is_de_jure_title|is_ascetic_trigger|is_inaccessible_trigger)\b
      scope: keyword.control.ck2script # these ones are actually scripted triggers
      # general scopes ( ideally would be a different color )
    - match: \b(dejure_liege_title|defacto_liege_title|rightful_religious_head_scope|religion_head|primary_title|succ_law_title|current_heir|supported_claimant|supported_claimant_title|capital_scope|capital_holding)\b
      scope: keyword.control.ck2script
    - match: \b(owner|holder_scope|liege|top_liege|((father|mother)(_even_if_dead)?)|attacker|defender|location|new_character|new_artifact|)\b
      scope: keyword.control.ck2script
      # top-level event trigger blocks
    - match: \b(trigger|major_trigger)\b
      scope: keyword.control.ck2script
      # CUSTOMIZABLE_LOCALISATION
    - match: \b(defined_text|text|localisation_key)\b
      scope: keyword.control.ck2script
      # FUTURE DECISION/LAW CONTEXT:
    - match: \b(decisions|title_decisions|settlement_decisions|targett?ed_decisions|plot_decisions|society_decisions)\b # top-level
      scope: keyword.control.ck2script
    - match: \b(allow|potential|from_potential|revoke_allowed)\b # triggers
      scope: keyword.control.ck2script
    - match: \b(effect|pass_effect)\b # effects
      scope: keyword.control.ck2script
    - match: \b(ai_will_do|ai_will_revoke)\b # modifier sets
      scope: keyword.control.ck2script
      # FUTURE MINOR TITLE / RELIGIOUS TITLE CONTEXT:
    - match: \b(allowed_to_grant|allowed_to_hold|revoke_trigger)\b # triggers
      scope: keyword.control.ck2script
    - match: \b(gain_effect|lose_effect|retire_effect)\b # effects
      scope: keyword.control.ck2script
    - match: \bai_will_do\b # modifier sets
      scope: keyword.control.ck2script
      # FUTURE JOB TITLE CONTEXT:
    - match: \b(allow|dismiss_trigger)\b # triggers
      scope: keyword.control.ck2script
    - match: \b(gain_effect|lose_effect|retire_effect)\b # effects
      scope: keyword.control.ck2script
      # FUTURE CB CONTEXT:
    - match: \b((can_use(_(title|gui))?)|(is_valid(_title)?))\b
      scope: keyword.control.ck2script
    - match: \b((on_(add|success|fail|reverse_demand)(_(title|posttitle))?)|on_invalidation|on_(attacker|defender)_leader_death)\b # effects
      scope: keyword.control.ck2script
    - match: \b(((attacker|defender)_ai_(victory|defeat)_worth)|ai_will_do)\b # modifier sets
      scope: keyword.control.ck2script
      # TODO: FUTURE CONTEXT OF JOB ACTIONS, AMBITIONS, PLOTS, FOCUSES, FACTIONS, LANDED_TITLES, COUNCIL_VOTING, TRAITS,
      #       COUNCIL_POSITIONS, GOVERNMENTS, ([LONG_]CHARACTER|LETTER|NARRATIVE|PROVINCE|UNIT|DIPLORESPONSE)_EVENT, ...
      # random stuff not covered above [yet]:
    - match: \b(mean_time_to_happen|weight_multiplier|chance|membership|ai_chance)\b # modifier sets
      scope: keyword.control.ck2script
    - match: \b(random|random_list)\b # effects w/ modifier sets
      scope: keyword.control.ck2script

  braces:
    - match: \}
      pop: true
    - include: main
